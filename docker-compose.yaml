services:
  # =============================================
  # 1. BASE DE DONNÉES (démarre en premier)
  # =============================================
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U kong" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================
  # 2. MIGRATION KONG (attend la DB)
  # =============================================
  kong-migration:
    image: kong:3.4
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net

  # =============================================
  # 3. SERVICES BACKEND (en parallèle, après DB)
  # =============================================
  user-service:
    image: nginx:alpine
    volumes:
      - ./services/user-service/nginx.conf:/etc/nginx/nginx.conf
      - ./services/user-service/html:/usr/share/nginx/html
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    image: nginx:alpine
    volumes:
      - ./services/product-service/nginx.conf:/etc/nginx/nginx.conf
      - ./services/product-service/html:/usr/share/nginx/html
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    image: nginx:alpine
    volumes:
      - ./services/order-service/nginx.conf:/etc/nginx/nginx.conf
      - ./services/order-service/html:/usr/share/nginx/html
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================
  # 4. REDIS (indépendant, peut démarrer tôt)
  # =============================================
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - ./redis:/data
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================
  # 5. KONG (attend migration + services backend)
  # =============================================
  kong:
    image: kong:3.4
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      kong-migration:
        condition: service_completed_successfully
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - kong-net
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10

  # =============================================
  # 6. CONFIGURATION KONG (attend Kong healthy)
  # =============================================
  kong-setup:
    image: curlimages/curl
    depends_on:
      kong:
        condition: service_healthy
    volumes:
      - ./scripts/setup-kong.sh:/setup-kong.sh
    command: [ "/bin/sh", "/setup-kong.sh" ]
    networks:
      - kong-net
    restart: "no"

# =============================================
# VOLUMES & NETWORKS
# =============================================
volumes:
  kong_data:

networks:
  kong-net:
    driver: bridge
